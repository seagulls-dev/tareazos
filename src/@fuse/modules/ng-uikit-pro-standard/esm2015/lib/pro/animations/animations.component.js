/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { trigger, state, style, transition, animate } from '@angular/animations';
// SideNav
/** @type {?} */
export const slideIn = trigger('slideIn', [
    state('inactive', style({ opacity: 0, transform: 'translateX(-300%)' })),
    state('active', style({ opacity: 1, transform: 'translateX(0)' })),
    transition('inactive => active', animate('500ms ease')),
    transition('active => inactive', animate('500ms ease')),
]);
/** @type {?} */
export const fadeIn = trigger('fadeIn', [
    state('inactive', style({ opacity: 0 })),
    state('active', style({ opacity: 1 })),
    transition('inactive => active', animate('500ms ease')),
    transition('active => inactive', animate('500ms ease')),
]);
/** @type {?} */
export const slideOut = trigger('slideOut', [
    state('inactive', style({ opacity: 0, transform: 'translateX(-300%)' })),
    state('active', style({ opacity: 1, transform: 'translateX(0)' })),
    transition('inactive => active', animate('500ms ease')),
    transition('active => inactive', animate('500ms ease')),
]);
/** @type {?} */
export const flipState = trigger('flipState', [
    state('active', style({ transform: 'rotateY(179.9deg)' })),
    state('inactive', style({ transform: 'rotateY(0)' })),
]);
// Rotating animation animation
/** @type {?} */
export const turnState = trigger('turnState', [
    state('active', style({ transform: 'rotateY(179.9deg)' })),
    state('inactive', style({ transform: 'rotateY(0)' })),
]);
// Social reveal animation
/** @type {?} */
export const iconsState = trigger('iconsState', [
    state('isactive', style({ visibility: 'visible', transform: 'translate(-6%)' })),
    state('isnotactive', style({ visibility: 'hidden', transform: 'translate(27%)' })),
    transition('isactive => isnotactive', animate('100ms ease-in')),
    transition('isnotactive => isactive', animate('200ms ease-out')),
]);
// Reveal animation animation
/** @type {?} */
export const socialsState = trigger('socialsState', [
    state('active', style({ visibility: 'visible', transform: 'translateY(-100%)' })),
    state('inactive', style({ visibility: 'hidden', transform: 'translateY(0)' })),
    transition('* => void', animate('200ms ease-in')),
    transition('void => *', animate('200ms ease-out')),
]);
// alerts
/** @type {?} */
export const flyInOut = trigger('flyInOut', [
    state('inactive', style({ display: 'none', opacity: 0.7 })),
    state('active', style({ opacity: 0.7 })),
    state('removed', style({ opacity: 0 })),
    transition('inactive => active', animate('300ms ease-in')),
    transition('active => removed', animate('300ms ease-in')),
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9ucy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy11aWtpdC1wcm8tc3RhbmRhcmQvIiwic291cmNlcyI6WyJsaWIvcHJvL2FuaW1hdGlvbnMvYW5pbWF0aW9ucy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQUdqRixNQUFNLE9BQU8sT0FBTyxHQUFRLE9BQU8sQ0FBQyxTQUFTLEVBQUU7SUFDN0MsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUM7SUFDeEUsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLFVBQVUsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdkQsVUFBVSxDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUN4RCxDQUFDOztBQUVGLE1BQU0sT0FBTyxNQUFNLEdBQVEsT0FBTyxDQUFDLFFBQVEsRUFBRTtJQUMzQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEMsVUFBVSxDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN2RCxVQUFVLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0NB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LENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0NBQzFELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cmlnZ2VyLCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIGFuaW1hdGUgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuLy8gU2lkZU5hdlxuZXhwb3J0IGNvbnN0IHNsaWRlSW46IGFueSA9IHRyaWdnZXIoJ3NsaWRlSW4nLCBbXG4gIHN0YXRlKCdpbmFjdGl2ZScsIHN0eWxlKHsgb3BhY2l0eTogMCwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtMzAwJSknIH0pKSxcbiAgc3RhdGUoJ2FjdGl2ZScsIHN0eWxlKHsgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwKScgfSkpLFxuICB0cmFuc2l0aW9uKCdpbmFjdGl2ZSA9PiBhY3RpdmUnLCBhbmltYXRlKCc1MDBtcyBlYXNlJykpLFxuICB0cmFuc2l0aW9uKCdhY3RpdmUgPT4gaW5hY3RpdmUnLCBhbmltYXRlKCc1MDBtcyBlYXNlJykpLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBmYWRlSW46IGFueSA9IHRyaWdnZXIoJ2ZhZGVJbicsIFtcbiAgc3RhdGUoJ2luYWN0aXZlJywgc3R5bGUoeyBvcGFjaXR5OiAwIH0pKSxcbiAgc3RhdGUoJ2FjdGl2ZScsIHN0eWxlKHsgb3BhY2l0eTogMSB9KSksXG4gIHRyYW5zaXRpb24oJ2luYWN0aXZlID0+IGFjdGl2ZScsIGFuaW1hdGUoJzUwMG1zIGVhc2UnKSksXG4gIHRyYW5zaXRpb24oJ2FjdGl2ZSA9PiBpbmFjdGl2ZScsIGFuaW1hdGUoJzUwMG1zIGVhc2UnKSksXG5dKTtcblxuZXhwb3J0IGNvbnN0IHNsaWRlT3V0OiBhbnkgPSB0cmlnZ2VyKCdzbGlkZU91dCcsIFtcbiAgc3RhdGUoJ2luYWN0aXZlJywgc3R5bGUoeyBvcGFjaXR5OiAwLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC0zMDAlKScgfSkpLFxuICBzdGF0ZSgnYWN0aXZlJywgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJyB9KSksXG4gIHRyYW5zaXRpb24oJ2luYWN0aXZlID0+IGFjdGl2ZScsIGFuaW1hdGUoJzUwMG1zIGVhc2UnKSksXG4gIHRyYW5zaXRpb24oJ2FjdGl2ZSA9PiBpbmFjdGl2ZScsIGFuaW1hdGUoJzUwMG1zIGVhc2UnKSksXG5dKTtcblxuZXhwb3J0IGNvbnN0IGZsaXBTdGF0ZTogYW55ID0gdHJpZ2dlcignZmxpcFN0YXRlJywgW1xuICBzdGF0ZSgnYWN0aXZlJywgc3R5bGUoeyB0cmFuc2Zvcm06ICdyb3RhdGVZKDE3OS45ZGVnKScgfSkpLFxuICBzdGF0ZSgnaW5hY3RpdmUnLCBzdHlsZSh7IHRyYW5zZm9ybTogJ3JvdGF0ZVkoMCknIH0pKSxcbl0pO1xuXG4vLyBSb3RhdGluZyBhbmltYXRpb24gYW5pbWF0aW9uXG5leHBvcnQgY29uc3QgdHVyblN0YXRlOiBhbnkgPSB0cmlnZ2VyKCd0dXJuU3RhdGUnLCBbXG4gIHN0YXRlKCdhY3RpdmUnLCBzdHlsZSh7IHRyYW5zZm9ybTogJ3JvdGF0ZVkoMTc5LjlkZWcpJyB9KSksXG4gIHN0YXRlKCdpbmFjdGl2ZScsIHN0eWxlKHsgdHJhbnNmb3JtOiAncm90YXRlWSgwKScgfSkpLFxuXSk7XG5cbi8vIFNvY2lhbCByZXZlYWwgYW5pbWF0aW9uXG5leHBvcnQgY29uc3QgaWNvbnNTdGF0ZTogYW55ID0gdHJpZ2dlcignaWNvbnNTdGF0ZScsIFtcbiAgc3RhdGUoJ2lzYWN0aXZlJywgc3R5bGUoeyB2aXNpYmlsaXR5OiAndmlzaWJsZScsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNiUpJyB9KSksXG4gIHN0YXRlKCdpc25vdGFjdGl2ZScsIHN0eWxlKHsgdmlzaWJpbGl0eTogJ2hpZGRlbicsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgyNyUpJyB9KSksXG4gIHRyYW5zaXRpb24oJ2lzYWN0aXZlID0+IGlzbm90YWN0aXZlJywgYW5pbWF0ZSgnMTAwbXMgZWFzZS1pbicpKSxcbiAgdHJhbnNpdGlvbignaXNub3RhY3RpdmUgPT4gaXNhY3RpdmUnLCBhbmltYXRlKCcyMDBtcyBlYXNlLW91dCcpKSxcbl0pO1xuXG4vLyBSZXZlYWwgYW5pbWF0aW9uIGFuaW1hdGlvblxuZXhwb3J0IGNvbnN0IHNvY2lhbHNTdGF0ZTogYW55ID0gdHJpZ2dlcignc29jaWFsc1N0YXRlJywgW1xuICBzdGF0ZSgnYWN0aXZlJywgc3R5bGUoeyB2aXNpYmlsaXR5OiAndmlzaWJsZScsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTEwMCUpJyB9KSksXG4gIHN0YXRlKCdpbmFjdGl2ZScsIHN0eWxlKHsgdmlzaWJpbGl0eTogJ2hpZGRlbicsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknIH0pKSxcbiAgdHJhbnNpdGlvbignKiA9PiB2b2lkJywgYW5pbWF0ZSgnMjAwbXMgZWFzZS1pbicpKSxcbiAgdHJhbnNpdGlvbigndm9pZCA9PiAqJywgYW5pbWF0ZSgnMjAwbXMgZWFzZS1vdXQnKSksXG5dKTtcblxuLy8gYWxlcnRzXG5leHBvcnQgY29uc3QgZmx5SW5PdXQ6IGFueSA9IHRyaWdnZXIoJ2ZseUluT3V0JywgW1xuICBzdGF0ZSgnaW5hY3RpdmUnLCBzdHlsZSh7IGRpc3BsYXk6ICdub25lJywgb3BhY2l0eTogMC43IH0pKSxcbiAgc3RhdGUoJ2FjdGl2ZScsIHN0eWxlKHsgb3BhY2l0eTogMC43IH0pKSxcbiAgc3RhdGUoJ3JlbW92ZWQnLCBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpLFxuICB0cmFuc2l0aW9uKCdpbmFjdGl2ZSA9PiBhY3RpdmUnLCBhbmltYXRlKCczMDBtcyBlYXNlLWluJykpLFxuICB0cmFuc2l0aW9uKCdhY3RpdmUgPT4gcmVtb3ZlZCcsIGFuaW1hdGUoJzMwMG1zIGVhc2UtaW4nKSksXG5dKTtcbiJdfQ==