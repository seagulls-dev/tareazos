{"version":3,"file":"dropdown.directive.d.ts","sources":["C:/repos/Handyman/src/@fuse/modules/ng-uikit-pro-standard/lib/free/dropdown/dropdown.directive.d.ts"],"sourcesContent":["import { ElementRef, EmbeddedViewRef, EventEmitter, OnDestroy, OnInit, Renderer2, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ComponentLoader } from '../utils/component-loader/component-loader.class';\nimport { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';\nimport { BsDropdownConfig } from './dropdown.config';\nimport { BsDropdownContainerComponent } from './dropdown-container.component';\nimport { BsDropdownState } from './dropdown.state';\nimport { BsDropdownMenuDirective } from './dropdown-menu.directive';\nexport declare class BsDropdownDirective implements OnInit, OnDestroy {\n    private _elementRef;\n    private _renderer;\n    private _viewContainerRef;\n    private _cis;\n    private _config;\n    private _state;\n    private cdRef;\n    /**\n     * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n     */\n    placement: string;\n    /**\n     * Specifies events that should trigger. Supports a space separated list of\n     * event names.\n     */\n    triggers: string;\n    /**\n     * A selector specifying the element the popover should be appended to.\n     * Currently only supports \"body\".\n     */\n    container: string;\n    dropup: boolean;\n    dropupDefault: boolean;\n    /**\n     * This attribute indicates that the dropdown should be opened upwards\n     */\n    readonly isDropup: true | undefined;\n    /**\n     * Indicates that dropdown will be closed on item or document click,\n     * and after pressing ESC\n     */\n    autoClose: boolean;\n    /**\n     * Disables dropdown toggle and hides dropdown menu if opened\n     */\n    isDisabled: boolean;\n    /**\n     * Returns whether or not the popover is currently being shown\n     */\n    isOpen: boolean;\n    /**\n     * Emits an event when isOpen change\n     */\n    isOpenChange: EventEmitter<any>;\n    /**\n     * Emits an event when the popover is shown\n     */\n    onShown: EventEmitter<any>;\n    shown: EventEmitter<any>;\n    /**\n     * Emits an event when the popover is hidden\n     */\n    onHidden: EventEmitter<any>;\n    hidden: EventEmitter<any>;\n    private _destroy$;\n    readonly isBs4: boolean;\n    _isInlineOpen: boolean;\n    _showInline: boolean;\n    _inlinedMenu: EmbeddedViewRef<BsDropdownMenuDirective>;\n    _isDisabled: boolean;\n    _dropdown: ComponentLoader<BsDropdownContainerComponent>;\n    _subscriptions: Subscription[];\n    _isInited: boolean;\n    _isDropupDefault: boolean;\n    constructor(_elementRef: ElementRef, _renderer: Renderer2, _viewContainerRef: ViewContainerRef, _cis: ComponentLoaderFactory, _config: BsDropdownConfig, _state: BsDropdownState, cdRef: ChangeDetectorRef);\n    ngOnInit(): void;\n    /**\n     * Opens an element’s popover. This is considered a “manual” triggering of\n     * the popover.\n     */\n    show(): void;\n    /**\n     * Closes an element’s popover. This is considered a “manual” triggering of\n     * the popover.\n     */\n    hide(): void;\n    /**\n     * Toggles an element’s popover. This is considered a “manual” triggering of\n     * the popover.\n     */\n    toggle(value?: boolean): void;\n    ngOnDestroy(): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA;"}