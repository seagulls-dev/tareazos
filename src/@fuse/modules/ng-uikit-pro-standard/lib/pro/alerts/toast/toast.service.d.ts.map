{"version":3,"file":"toast.service.d.ts","sources":["C:/repos/Handyman/src/@fuse/modules/ng-uikit-pro-standard/lib/pro/alerts/toast/toast.service.d.ts"],"sourcesContent":["import { Injector, ComponentRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Overlay } from '../overlay/overlay';\nimport { GlobalConfig, IndividualConfig } from './toast.config';\nimport { ToastContainerDirective } from './toast.directive';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ToastRef } from './toast-ref';\nexport interface ActiveToast {\n    toastId?: number;\n    message?: string;\n    portal?: ComponentRef<any>;\n    toastRef?: ToastRef<any>;\n    onShown?: Observable<any>;\n    onHidden?: Observable<any>;\n    onTap?: Observable<any>;\n    onAction?: Observable<any>;\n}\nexport declare class ToastService {\n    toastConfig: GlobalConfig | any;\n    private overlay;\n    private _injector;\n    private sanitizer;\n    index: number;\n    previousToastMessage: string;\n    currentlyActive: number;\n    toasts: ActiveToast[];\n    overlayContainer: ToastContainerDirective;\n    constructor(toastConfig: GlobalConfig | any, overlay: Overlay, _injector: Injector, sanitizer: DomSanitizer);\n    /** show successful toast */\n    show(message: string, title?: string | any, override?: IndividualConfig | any, type?: string): any;\n    /** show successful toast */\n    success(message: string, title?: string | any, override?: IndividualConfig): any;\n    /** show error toast */\n    error(message: string, title?: string | any, override?: IndividualConfig): any;\n    /** show info toast */\n    info(message: string, title?: string | any, override?: IndividualConfig): any;\n    /** show warning toast */\n    warning(message: string, title?: string | any, override?: IndividualConfig): any;\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId?: number): void;\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId: number): boolean;\n    /**\n     * Determines if toast message is already shown\n     */\n    isDuplicate(message: string): boolean;\n    /** create a clone of global config and apply individual settings */\n    private applyConfig;\n    /**\n     * Find toast object by id\n     */\n    private _findToast;\n    /**\n     * Creates and attaches toast data to component\n     * returns null if toast is duplicate and preventDuplicates == True\n     */\n    private _buildNotification;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;"}