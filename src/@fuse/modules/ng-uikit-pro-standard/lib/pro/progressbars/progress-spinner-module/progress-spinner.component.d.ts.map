{"version":3,"file":"progress-spinner.component.d.ts","sources":["C:/repos/Handyman/src/@fuse/modules/ng-uikit-pro-standard/lib/pro/progressbars/progress-spinner-module/progress-spinner.component.d.ts"],"sourcesContent":["import { OnDestroy, ElementRef, NgZone, Renderer2 } from '@angular/core';\nexport declare type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MdProgressSpinnerCssMatStylerDirective {\n    true: any;\n}\n/**\n * <md-progress-spinner> component.\n */\nexport declare class MdProgressSpinnerComponent implements OnDestroy {\n    private _ngZone;\n    private _elementRef;\n    private _renderer;\n    /** The id of the last requested animation. */\n    private _lastAnimationId;\n    /** The id of the indeterminate interval. */\n    private _interdeterminateInterval;\n    /** The SVG <path> node that is used to draw the circle. */\n    private _path;\n    private _mode;\n    private _value;\n    private _color;\n    isBrowser: any;\n    platformId: string;\n    /**\n     * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n     * because voiceover does not report the progress indicator as indeterminate if the aria min\n     * and/or max value are number values.\n     */\n    readonly _ariaValueMin: 0 | null;\n    readonly _ariaValueMax: 100 | null;\n    /** @docs-private */\n    /** @docs-private */\n    interdeterminateInterval: any;\n    /**\n     * Clean up any animations that were running.\n     */\n    ngOnDestroy(): void;\n    /** The color of the progress-spinner. Can be primary, accent, or warn. */\n    color: string;\n    /** Value of the progress circle. It is bound to the host as the attribute aria-valuenow. */\n    value: any;\n    /**\n     * Mode of the progress circle\n     *\n     * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n     * mode is bound to the host as the attribute host.\n     */\n    mode: ProgressSpinnerMode;\n    constructor(_ngZone: NgZone, _elementRef: ElementRef, _renderer: Renderer2, platformId?: string | any);\n    /**\n     * Animates the circle from one percentage value to another.\n     *\n     * @param animateFrom The percentage of the circle filled starting the animation.\n     * @param animateTo The percentage of the circle filled ending the animation.\n     * @param ease The easing function to manage the pace of change in the animation.\n     * @param duration The length of time to show the animation, in milliseconds.\n     * @param rotation The starting angle of the circle fill, with 0Â° represented at the top center\n     *    of the circle.\n     */\n    private _animateCircle;\n    /**\n     * Starts the indeterminate animation interval, if it is not already running.\n     */\n    private _startIndeterminateAnimation;\n    /**\n     * Removes interval, ending the animation.\n     */\n    private _cleanupIndeterminateAnimation;\n    /**\n     * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n     * DOM attribute on the `<path>`.\n     */\n    private _renderArc;\n    /**\n     * Updates the color of the progress-spinner by adding the new palette class to the element\n     * and removing the old one.\n     */\n    private _updateColor;\n    /** Sets the given palette class on the component element. */\n    private _setElementColor;\n}\n/**\n * <md-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport declare class MdSpinnerComponent extends MdProgressSpinnerComponent implements OnDestroy {\n    true: any;\n    constructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2);\n    ngOnDestroy(): void;\n}\n"],"names":[],"mappings":"AAAA;;AACA;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;;;;;;;;;;;;;AAWA;"}